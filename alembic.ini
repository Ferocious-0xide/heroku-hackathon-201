# alembic.ini
[alembic]
# Path to migration scripts
script_location = migrations

# Template used to generate migration files
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# System-wide alembic configuration
[alembic:system]
# Set to 'true' to run migrations in 'offline' mode.
is_offline_mode = false

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[logger_root]
level = INFO
handlers = console
qualname =

# migrations/env.py
from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context
from app.database import Base
from app.config import settings

config = context.config

if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata

def run_migrations_online() -> None:
    """
    Run migrations in 'online' mode - this is the production scenario.
    Connects to the database and runs migrations within a transaction.
    """
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = settings.DATABASE_URL
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            # Enable comparison of column types between migrations
            compare_type=True,
            # Enable comparison of server defaults between migrations
            compare_server_default=True,
        )

        with context.begin_transaction():
            context.run_migrations()

def run_migrations_offline() -> None:
    """
    Run migrations in 'offline' mode - useful for generating SQL scripts.
    """
    url = settings.DATABASE_URL
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()